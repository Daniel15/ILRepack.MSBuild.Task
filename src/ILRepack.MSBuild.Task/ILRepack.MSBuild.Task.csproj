<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0">

  <PropertyGroup>
    <OsPlatform Condition="$([MSBuild]::IsOsPlatform('Windows'))">Windows</OsPlatform>
    <OsPlatform Condition="'$(OsPlatform)' == '' AND !$([MSBuild]::IsOsPlatform('Windows'))">Unix</OsPlatform>
    <TargetFrameworks Condition="'$(ILRepackMSBuildTaskPackageForRelease)' != 'true' AND '$(OsPlatform)' == 'Windows'">netcoreapp2.1;netstandard2.0;net46</TargetFrameworks>
    <TargetFrameworks Condition="'$(ILRepackMSBuildTaskPackageForRelease)' != 'true' AND '$(OsPlatform)' != 'Windows'">netcoreapp2.2;netstandard2.0</TargetFrameworks>
    <TargetFrameworks Condition="'$(ILRepackMSBuildTaskPackageForRelease)' == 'true'">netcoreapp2.1;netstandard2.0;net46</TargetFrameworks>
    <RootNamespace>ILRepack.MSBuild.Task</RootNamespace>
    <AssemblyName>ILRepack.MSBuild.Task</AssemblyName>
    <IsPackable>false</IsPackable>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <LangVersion>7.3</LangVersion>
    <Version>0.0.0</Version>
    <IsNetFullFramework Condition="$(TargetFramework.Contains('netcoreapp')) OR $(TargetFramework.Contains('netcoreapp'))">false</IsNetFullFramework>
    <IsNetFullFramework Condition="'$(OsPlatform)' == 'Windows' AND '$(IsNetFullFramework)' == ''">true</IsNetFullFramework>
    <DefineConstants Condition="'$(IsNetFullFramework)' == 'true'">$(DefineConstants);ISNETFULLFRAMEWORK;</DefineConstants>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <PackageId>ILRepack.MSBuild.Task</PackageId>
    <Description>MSBuild task for ILRepack which is an open-source alternative to ILMerge.</Description>
    <Platforms>AnyCPU</Platforms>
    <Authors>Peter Rekdal Sunde</Authors>
    <Product>ILRepack.MSBuild.Task</Product>
    <Copyright>Copyright © Peter Rekdal Sunde</Copyright>
    <NeutralLanguage>en-US</NeutralLanguage>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageLicenseUrl>https://opensource.org/licenses/MIT</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/peters/ILRepack.MSBuild.Task</PackageProjectUrl>
    <RepositoryUrl>https://github.com/peters/ILRepack.MSBuild.Task.git</RepositoryUrl>
    <PackageReleaseNotes>See $(PackageProjectUrl)/blob/master/CHANGELOG.md#v$(VersionPrefix.Replace('.','')) for release notes.</PackageReleaseNotes>
    <RepositoryType>git</RepositoryType>
    <IsPackable>true</IsPackable>
    <IsTestProject>false</IsTestProject>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <LangVersion>7.3</LangVersion>
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    <Version>2.0.0-pre0</Version>
    <!--<PackageOutputPath>$(MSBuildThisFileDirectory)..\..\nupkgs</PackageOutputPath>-->
    <PackageOutputPath>c:\nupkgs</PackageOutputPath>
    <!-- Suppresses the warnings about the package not having assemblies in lib/*/.dll.-->
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <!-- Change the default location where NuGet will put the build output -->
    <BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
    <VersionPrefix>0.1.0</VersionPrefix>
    <VersionSuffix>build$([System.DateTime]::Now.ToString('yyyyMMdd-HHmm'))</VersionSuffix>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="ILRepack.MSBuild.Task.TargetFramework.props" Pack="true" PackagePath="build\ILRepack.MSBuild.Task.props" />
    <Content Include="ILRepack.MSBuild.Task.TargetFrameworks.props" Pack="true" PackagePath="buildMultiTargeting\ILRepack.MSBuild.Task.props" />
    <Content Include="..\..\build\ilrepack\windows\ilrepack.exe" Pack="true" PackagePath="tools\" CopyToOutputDirectory="Always" Condition="'$(ILRepackMSBuildTaskPackageForRelease)' == 'true' AND '$(OsPlatform)' == 'Windows'" />
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="nupkgs\**" />
    <EmbeddedResource Remove="nupkgs\**" />
    <None Remove="nupkgs\**" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Framework" Version="15.9.20" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="15.9.20" />

    <!-- Marks all packages as 'local only' so they don't end up in the nuspec. -->
    <PackageReference Update="@(PackageReference)" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\deps\ilrepack\deps\bamlparser\BamlParser.csproj" />
    <ProjectReference Include="..\..\deps\ilrepack\deps\cecil\Mono.Cecil.csproj" />
    <ProjectReference Include="..\..\deps\ilrepack\deps\fasterflect\Fasterflect.Netstandard.csproj" />
    <ProjectReference Include="..\..\deps\ilrepack\ILRepack\ILRepack.csproj" />
    <ProjectReference Update="@(ProjectReference)" PrivateAssets="All" />
  </ItemGroup>

  <Target Name="ILRepackThisAssembly" AfterTargets="Build" Condition="'$(ILRepackMSBuildTaskPackageForRelease)' == 'true' AND '$(OsPlatform)' == 'Windows'">

    <PropertyGroup> 
      <InputAssemblies Condition="'$(IsNetFullFramework)' == 'true'">
        ilrepack.dll
      </InputAssemblies>
      <InputAssemblies Condition="$(TargetFramework.Contains('netstandard'))">
        ilrepack.dll
        microsoft.build.framework.dll 
        microsoft.build.utilities.core.dll 
        system.collections.immutable.dll
        system.reflection.emit.ilgeneration.dll
        system.reflection.emit.lightweight.dll
        system.runtime.interopservices.runtimeinformation.dll
        system.runtime.serialization.primitives.dll
        system.text.encoding.codepages.dll
        system.threading.dll
        system.threading.thread.dll
      </InputAssemblies>
      <InputAssemblies Condition="$(TargetFramework.Contains('netcoreapp'))">
        microsoft.build.framework.dll 
        microsoft.build.utilities.core.dll
        system.text.encoding.codepages.dll
      </InputAssemblies>
      <WorkingDirectory>$(OutputPath)</WorkingDirectory>
    </PropertyGroup>

    <Exec IgnoreExitCode="true" WorkingDirectory="$(WorkingDirectory)" Command="ilrepack.exe /target:library /internalize $(AssemblyName).dll $([System.Text.RegularExpressions.Regex]::Replace( $(InputAssemblies), '\r\n', ' ' ) ) /out:./$(AssemblyName).dll" />
    
  </Target>

</Project>